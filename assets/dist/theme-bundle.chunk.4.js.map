{"version":3,"sources":["webpack:///./assets/js/theme/common/gift-certificate-validator.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/gift-certificate.js"],"names":["cert","forms","email","value","re","test","password","notEmpty","length","GiftCertificate","context","$certBalanceForm","$","purchaseModel","recipientName","val","recipientEmail","formModel","senderName","senderEmail","customAmount","min","max","setAmount","options","found","forEach","option","$purchaseForm","$customAmounts","find","purchaseValidator","nod","submit","delay","$element","data","minFormatted","maxFormatted","add","selector","validate","cb","numberVal","Number","errorMessage","result","toName","toEmail","fromName","fromEmail","triggeredBy","certTheme","get","checked","agreeToTerms","balanceVal","checkCertBalanceValidator","on","performCheck","areAll","event","preventDefault","click","modal","defaultModal","previewUrl","currentTarget","serialize","open","api","getPage","err","content","updateContent","previewError","wrap","$balanceForm","balanceValidator","giftCertChecker","PageManager"],"mappings":"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","file":"theme-bundle.chunk.4.js","sourcesContent":["export default function (cert) {\n    if (typeof cert !== 'string') {\n        return false;\n    }\n\n    // Add any custom gift certificate validation logic here\n    return true;\n}\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import PageManager from './page-manager';\nimport $ from 'jquery';\nimport nod from './common/nod';\nimport giftCertChecker from './common/gift-certificate-validator';\nimport formModel from './common/models/forms';\nimport { api } from '@bigcommerce/stencil-utils';\nimport { defaultModal } from './global/modal';\n\nexport default class GiftCertificate extends PageManager {\n    constructor(context) {\n        super(context);\n\n        const $certBalanceForm = $('#gift-certificate-balance');\n\n        const purchaseModel = {\n            recipientName(val) {\n                return val.length;\n            },\n            recipientEmail(...args) {\n                return formModel.email(...args);\n            },\n            senderName(val) {\n                return val.length;\n            },\n            senderEmail(...args) {\n                return formModel.email(...args);\n            },\n            customAmount(value, min, max) {\n                return value && value >= min && value <= max;\n            },\n            setAmount(value, options) {\n                let found = false;\n\n                options.forEach((option) => {\n                    if (option === value) {\n                        found = true;\n                        return false;\n                    }\n                });\n\n                return found;\n            },\n        };\n\n        const $purchaseForm = $('#gift-certificate-form');\n        const $customAmounts = $purchaseForm.find('input[name=\"certificate_amount\"]');\n        const purchaseValidator = nod({\n            submit: '#gift-certificate-form input[type=\"submit\"]',\n            delay: 300,\n        });\n\n        if ($customAmounts.length) {\n            const $element = $purchaseForm.find('input[name=\"certificate_amount\"]');\n            const min = $element.data('min');\n            const minFormatted = $element.data('minFormatted');\n            const max = $element.data('max');\n            const maxFormatted = $element.data('maxFormatted');\n\n            purchaseValidator.add({\n                selector: '#gift-certificate-form input[name=\"certificate_amount\"]',\n                validate: (cb, val) => {\n                    const numberVal = Number(val);\n\n                    if (!numberVal) {\n                        cb(false);\n                    }\n\n                    cb(numberVal >= min && numberVal <= max);\n                },\n                errorMessage: `You must enter a certificate amount between ${minFormatted} and ${maxFormatted}.`,\n            });\n        }\n\n        purchaseValidator.add([\n            {\n                selector: '#gift-certificate-form input[name=\"to_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"to_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.recipientEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.toEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_name\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderName(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromName,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"from_email\"]',\n                validate: (cb, val) => {\n                    const result = purchaseModel.senderEmail(val);\n\n                    cb(result);\n                },\n                errorMessage: this.context.fromEmail,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"certificate_theme\"]:first-of-type',\n                triggeredBy: '#gift-certificate-form input[name=\"certificate_theme\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"certificate_theme\"]:checked').val();\n\n                    cb(typeof (val) === 'string');\n                },\n                errorMessage: this.context.certTheme,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n            {\n                selector: '#gift-certificate-form input[name=\"agree2\"]',\n                validate: (cb) => {\n                    const val = $purchaseForm.find('input[name=\"agree2\"]').get(0).checked;\n\n                    cb(val);\n                },\n                errorMessage: this.context.agreeToTerms,\n            },\n        ]);\n\n        if ($certBalanceForm.length) {\n            const balanceVal = this.checkCertBalanceValidator($certBalanceForm);\n\n            $certBalanceForm.on('submit', () => {\n                balanceVal.performCheck();\n\n                if (!balanceVal.areAll('valid')) {\n                    return false;\n                }\n            });\n        }\n\n        $purchaseForm.on('submit', event => {\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return event.preventDefault();\n            }\n        });\n\n        $('#gift-certificate-preview').click(event => {\n            event.preventDefault();\n\n            purchaseValidator.performCheck();\n\n            if (!purchaseValidator.areAll('valid')) {\n                return;\n            }\n\n            const modal = defaultModal();\n            const previewUrl = `${$(event.currentTarget).data('previewUrl')}&${$purchaseForm.serialize()}`;\n\n            modal.open();\n\n            api.getPage(previewUrl, {}, (err, content) => {\n                if (err) {\n                    return modal.updateContent(this.context.previewError);\n                }\n\n                modal.updateContent(content, { wrap: true });\n            });\n        });\n    }\n\n    checkCertBalanceValidator($balanceForm) {\n        const balanceValidator = nod({\n            submit: $balanceForm.find('input[type=\"submit\"]'),\n        });\n\n        balanceValidator.add({\n            selector: $balanceForm.find('input[name=\"giftcertificatecode\"]'),\n            validate(cb, val) {\n                cb(giftCertChecker(val));\n            },\n            errorMessage: 'You must enter a certificate code.',\n        });\n\n        return balanceValidator;\n    }\n}\n"],"sourceRoot":""}