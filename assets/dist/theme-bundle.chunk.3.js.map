{"version":3,"sources":["webpack:///./assets/js/theme/common/form-utils.js","webpack:///./assets/js/theme/common/models/forms.js","webpack:///./assets/js/theme/common/state-country.js"],"names":["inputTagNames","classifyInput","input","formFieldClass","$input","$","$formField","parent","tagName","prop","toLowerCase","className","specificClassName","inputType","addClass","classifyForm","formSelector","options","$form","$inputs","find","join","each","__","getFieldId","$field","fieldId","match","length","insertStateHiddenField","$stateField","stateFieldAttrs","type","name","value","after","Validators","setEmailValidation","validator","field","add","selector","validate","cb","val","result","forms","email","errorMessage","setPasswordValidation","passwordSelector","password2Selector","requirements","isOptional","$password","passwordValidations","RegExp","alpha","numeric","minlength","error","setMinMaxPriceValidation","selectors","errorSelector","fieldsetSelector","maxPriceSelector","minPriceSelector","configure","form","preventSubmit","successClass","setMessageOptions","errorSpan","setStateCountryValidation","cleanUpStateValidation","$fieldClassElement","data","Object","keys","nod","classes","forEach","hasClass","removeClass","re","test","password","notEmpty","makeStateRequired","stateElement","context","attrs","item","ret","replacementAttributes","id","class","replaceWith","$newElement","$hiddenInput","remove","prev","append","required","show","makeStateOptional","hide","addOptions","statesArray","$selectElement","container","push","prefix","states","stateObj","useIdForStates","html","callback","on","countryName","event","currentTarget","utils","api","country","getByName","err","response","swal","text","state_error","$currentInput","newElement"],"mappings":"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","file":"theme-bundle.chunk.3.js","sourcesContent":["import $ from 'jquery';\nimport _ from 'lodash';\nimport nod from './nod';\nimport forms from './models/forms';\n\nconst inputTagNames = [\n    'input',\n    'select',\n    'textarea',\n];\n\n/**\n * Apply class name to an input element on its type\n * @param {object} input\n * @param {string} formFieldClass\n * @return {object} Element itself\n */\nfunction classifyInput(input, formFieldClass) {\n    const $input = $(input);\n    const $formField = $input.parent(`.${formFieldClass}`);\n    const tagName = $input.prop('tagName').toLowerCase();\n\n    let className = `${formFieldClass}--${tagName}`;\n    let specificClassName;\n\n    // Input can be text/checkbox/radio etc...\n    if (tagName === 'input') {\n        const inputType = $input.prop('type');\n\n        if (_.includes(['radio', 'checkbox', 'submit'], inputType)) {\n            // ie: .form-field--checkbox, .form-field--radio\n            className = `${formFieldClass}--${_.camelCase(inputType)}`;\n        } else {\n            // ie: .form-field--input .form-field--inputText\n            specificClassName = `${className}${_.capitalize(inputType)}`;\n        }\n    }\n\n    // Apply class modifier\n    return $formField\n        .addClass(className)\n        .addClass(specificClassName);\n}\n\n/**\n * Apply class name to each input element in a form based on its type\n * @example\n * // Before\n * <form id=\"form\">\n *     <div class=\"form-field\">\n *         <input type=\"text\">\n *     </div>\n *     <div class=\"form-field\">\n *         <select>...</select>\n *     </div>\n * </form>\n *\n * classifyForm('#form', { formFieldClass: 'form-field' });\n *\n * // After\n * <div class=\"form-field form-field--input form-field--inputText\">...</div>\n * <div class=\"form-field form-field--select\">...</div>\n *\n * @param {string|object} formSelector - selector or element\n * @param {object} options\n * @return {jQuery} Element itself\n */\nexport function classifyForm(formSelector, options = {}) {\n    const $form = $(formSelector);\n    const $inputs = $form.find(inputTagNames.join(', '));\n\n    // Obtain options\n    const { formFieldClass = 'form-field' } = options;\n\n    // Classify each input in a form\n    $inputs.each((__, input) => {\n        classifyInput(input, formFieldClass);\n    });\n\n    return $form;\n}\n\n/**\n * Get id from given field\n * @param {object} $field JQuery field object\n * @return {string}\n */\nfunction getFieldId($field) {\n    const fieldId = $field.prop('name').match(/(\\[.*\\])/);\n\n    if (fieldId && fieldId.length !== 0) {\n        return fieldId[0];\n    }\n\n    return '';\n}\n\n/**\n * Insert hidden field after State/Province field\n * @param {object} $stateField JQuery field object\n */\nfunction insertStateHiddenField($stateField) {\n    const fieldId = getFieldId($stateField);\n    const stateFieldAttrs = {\n        type: 'hidden',\n        name: `FormFieldIsText${fieldId}`,\n        value: '1',\n    };\n\n    $stateField.after($('<input />', stateFieldAttrs));\n}\n\nconst Validators = {\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setEmailValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: (cb, val) => {\n                    const result = forms.email(val);\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a valid email.',\n            });\n        }\n    },\n\n    /**\n     * Validate password fields\n     * @param validator\n     * @param passwordSelector\n     * @param password2Selector\n     * @param requirements\n     * @param isOptional\n     */\n    setPasswordValidation: (validator, passwordSelector, password2Selector, requirements, isOptional) => {\n        const $password = $(passwordSelector);\n        const passwordValidations = [\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: passwordSelector,\n                validate: (cb, val) => {\n                    const result = val.match(new RegExp(requirements.alpha))\n                        && val.match(new RegExp(requirements.numeric))\n                        && val.length >= requirements.minlength;\n\n                    // If optional and nothing entered, it is valid\n                    if (isOptional && val.length === 0) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: requirements.error,\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val.length;\n\n                    if (isOptional) {\n                        return cb(true);\n                    }\n\n                    cb(result);\n                },\n                errorMessage: 'You must enter a password.',\n            },\n            {\n                selector: password2Selector,\n                validate: (cb, val) => {\n                    const result = val === $password.val();\n\n                    cb(result);\n                },\n                errorMessage: 'Your passwords do not match.',\n            },\n        ];\n\n        validator.add(passwordValidations);\n    },\n\n    /**\n     * Validate password fields\n     * @param {Nod} validator\n     * @param {Object} selectors\n     * @param {string} selectors.errorSelector\n     * @param {string} selectors.fieldsetSelector\n     * @param {string} selectors.formSelector\n     * @param {string} selectors.maxPriceSelector\n     * @param {string} selectors.minPriceSelector\n     */\n    setMinMaxPriceValidation: (validator, selectors) => {\n        const {\n            errorSelector,\n            fieldsetSelector,\n            formSelector,\n            maxPriceSelector,\n            minPriceSelector,\n        } = selectors;\n\n        validator.configure({\n            form: formSelector,\n            preventSubmit: true,\n            successClass: '_', // KLUDGE: Don't apply success class\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: minPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Min price must be less than max. price.',\n            selector: maxPriceSelector,\n            validate: `min-max:${minPriceSelector}:${maxPriceSelector}`,\n        });\n\n        validator.add({\n            errorMessage: 'Max. price is required.',\n            selector: maxPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Min. price is required.',\n            selector: minPriceSelector,\n            validate: 'presence',\n        });\n\n        validator.add({\n            errorMessage: 'Input must be greater than 0.',\n            selector: [minPriceSelector, maxPriceSelector],\n            validate: 'min-number:0',\n        });\n\n        validator.setMessageOptions({\n            selector: [minPriceSelector, maxPriceSelector],\n            parent: fieldsetSelector,\n            errorSpan: errorSelector,\n        });\n    },\n\n    /**\n     * Sets up a new validation when the form is dirty\n     * @param validator\n     * @param field\n     */\n    setStateCountryValidation: (validator, field) => {\n        if (field) {\n            validator.add({\n                selector: field,\n                validate: 'presence',\n                errorMessage: 'The \\'State/Province\\' field cannot be blank.',\n            });\n        }\n    },\n\n    /**\n     * Removes classes from dirty form if previously checked\n     * @param field\n     */\n    cleanUpStateValidation: (field) => {\n        const $fieldClassElement = $((`[data-type=\"${field.data('fieldType')}\"]`));\n\n        Object.keys(nod.classes).forEach((value) => {\n            if ($fieldClassElement.hasClass(nod.classes[value])) {\n                $fieldClassElement.removeClass(nod.classes[value]);\n            }\n        });\n    },\n};\n\nexport { Validators, insertStateHiddenField };\n","const forms = {\n    email(value) {\n        const re = /^.+@.+\\..+/;\n        return re.test(value);\n    },\n\n    /**\n     * Validates a password field\n     * @param value\n     * @returns {boolean}\n     */\n    password(value) {\n        return this.notEmpty(value);\n    },\n\n    /**\n     * validates if a field is empty\n     * @param value\n     * @returns {boolean}\n     *\n     */\n    notEmpty(value) {\n        return value.length > 0;\n    },\n};\n\nexport default forms;\n","import $ from 'jquery';\nimport utils from '@bigcommerce/stencil-utils';\nimport _ from 'lodash';\nimport { insertStateHiddenField } from './form-utils';\nimport swal from 'sweetalert2';\n\n/**\n * If there are no options from bcapp, a text field will be sent. This will create a select element to hold options after the remote request.\n * @returns {jQuery|HTMLElement}\n */\nfunction makeStateRequired(stateElement, context) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n        return ret;\n    });\n\n    const replacementAttributes = {\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-select',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<select></select>', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n    const $hiddenInput = $('[name*=\"FormFieldIsText\"]');\n\n    if ($hiddenInput.length !== 0) {\n        $hiddenInput.remove();\n    }\n\n    if ($newElement.prev().find('small').length === 0) {\n        // String is injected from localizer\n        $newElement.prev().append(`<small>${context.required}</small>`);\n    } else {\n        $newElement.prev().find('small').show();\n    }\n\n    return $newElement;\n}\n\n/**\n * If a country with states is the default, a select will be sent,\n * In this case we need to be able to switch to an input field and hide the required field\n */\nfunction makeStateOptional(stateElement) {\n    const attrs = _.transform(stateElement.prop('attributes'), (result, item) => {\n        const ret = result;\n        ret[item.name] = item.value;\n\n        return ret;\n    });\n\n    const replacementAttributes = {\n        type: 'text',\n        id: attrs.id,\n        'data-label': attrs['data-label'],\n        class: 'form-input',\n        name: attrs.name,\n        'data-field-type': attrs['data-field-type'],\n    };\n\n    stateElement.replaceWith($('<input />', replacementAttributes));\n\n    const $newElement = $('[data-field-type=\"State\"]');\n\n    if ($newElement.length !== 0) {\n        insertStateHiddenField($newElement);\n        $newElement.prev().find('small').hide();\n    }\n\n    return $newElement;\n}\n\n/**\n * Adds the array of options from the remote request to the newly created select box.\n * @param {Object} statesArray\n * @param {jQuery} $selectElement\n * @param {Object} options\n */\nfunction addOptions(statesArray, $selectElement, options) {\n    const container = [];\n\n    container.push(`<option value=\"\">${statesArray.prefix}</option>`);\n\n    if (!_.isEmpty($selectElement)) {\n        _.each(statesArray.states, (stateObj) => {\n            if (options.useIdForStates) {\n                container.push(`<option value=\"${stateObj.id}\">${stateObj.name}</option>`);\n            } else {\n                container.push(`<option value=\"${stateObj.name}\">${stateObj.name}</option>`);\n            }\n        });\n\n        $selectElement.html(container.join(' '));\n    }\n}\n\n/**\n *\n * @param {jQuery} stateElement\n * @param {Object} context\n * @param {Object} options\n * @param {Function} callback\n */\nexport default function (stateElement, context = {}, options, callback) {\n    /**\n     * Backwards compatible for three parameters instead of four\n     *\n     * Available options:\n     *\n     * useIdForStates {Bool} - Generates states dropdown using id for values instead of strings\n     */\n    if (typeof options === 'function') {\n        /* eslint-disable no-param-reassign */\n        callback = options;\n        options = {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    $('select[data-field-type=\"Country\"]').on('change', event => {\n        const countryName = $(event.currentTarget).val();\n\n        if (countryName === '') {\n            return;\n        }\n\n        utils.api.country.getByName(countryName, (err, response) => {\n            if (err) {\n                swal({\n                    text: context.state_error,\n                    type: 'error',\n                });\n\n                return callback(err);\n            }\n\n            const $currentInput = $('[data-field-type=\"State\"]');\n\n            if (!_.isEmpty(response.data.states)) {\n                // The element may have been replaced with a select, reselect it\n                const $selectElement = makeStateRequired($currentInput, context);\n\n                addOptions(response.data, $selectElement, options);\n                callback(null, $selectElement);\n            } else {\n                const newElement = makeStateOptional($currentInput, context);\n\n                callback(null, newElement);\n            }\n        });\n    });\n}\n"],"sourceRoot":""}